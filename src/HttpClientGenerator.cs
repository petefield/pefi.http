using Microsoft.CodeAnalysis;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Models.Interfaces;
using Microsoft.OpenApi.Models.References;
using System.Text;
using System.Text.RegularExpressions;

namespace pefi.http
{
    public partial class ClientGenerator
    {
        public static async Task<string?> Execute(string nameSpace, string className, string sourceUrl, CancellationToken cancellationToken)
        {
            var openApiDoc = await ParseOpenApiDocument(sourceUrl);
            var clientSource = GenerateClientSource(nameSpace, className, sourceUrl, openApiDoc);
            return clientSource;
        }

        private static async Task<OpenApiDocument> ParseOpenApiDocument(string sourceUrl)
        {
            try
            {
                var openApiDocumentResult = OpenApiDocument.Parse(sourceUrl);


                return openApiDocumentResult.Document;
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"Failed to parse OpenAPI content from {sourceUrl} : {ex.Message} {ex.InnerException?.Message ?? ""}", ex);
            }
        }

        private static string GenerateClientSource(string nameSpace, string className, string sourceUrl, OpenApiDocument openApiDoc)
        {
            var sb = new StringBuilder();

            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#pragma warning disable");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Net.Http;");
            sb.AppendLine("using System.Threading;");
            sb.AppendLine("using System.Threading.Tasks;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Text.Json;");
            sb.AppendLine();

            sb.AppendLine($"namespace {nameSpace}");
            sb.AppendLine("{");


            if (openApiDoc.Components?.Schemas.Any() ?? false)
            {
                foreach (var schema in openApiDoc.Components?.Schemas)
                {
                    GenerateModel(sb, schema.Key, schema.Value);
                }
            }

            // Generate partial class
            sb.AppendLine($"    public partial class {className}");
            sb.AppendLine("    {");
            sb.AppendLine("        private readonly HttpClient _httpClient;");
            sb.AppendLine("        private readonly JsonSerializerOptions _jsonOptions;");
            sb.AppendLine();

            sb.AppendLine($"        public {className}(HttpClient httpClient)");
            sb.AppendLine("        {");
            sb.AppendLine("            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));");
            sb.AppendLine("            _jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };");
            sb.AppendLine("        }");
            sb.AppendLine();

            // Generate API methods
            foreach (var path in openApiDoc.Paths)
            {
                foreach (var operation in path.Value.Operations)
                {
                    GenerateApiMethod(sb, operation.Key, path.Key, operation.Value, openApiDoc);
                }
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        private static void GenerateModel(StringBuilder sb, string name, IOpenApiSchema schema)
        {
            var typeName = SanitizeIdentifier(name);
            sb.AppendLine($"    public class {typeName}");
            sb.AppendLine("    {");

            foreach (var property in schema.Properties)
            {
                var propertyName = SanitizeIdentifier(property.Key);
                var propertyType = GetCSharpTypeName(property.Value);
                sb.AppendLine($"        public {propertyType} {propertyName} {{ get; set; }}");

                // Handle default values
                if (property.Value.Default != null)
                {
                    var defaultValue = GetDefaultValue(property.Value);
                    sb.AppendLine($"            = {defaultValue};");
                }
            }

            sb.AppendLine("    }");
            sb.AppendLine();
        }

        private static string MapOperationType(OperationType ot) => ot switch
        {
            OperationType.Get => "Get",
            OperationType.Patch => "Patch",
            OperationType.Put => "GetPut",
            OperationType.Post => "Post",
            OperationType.Delete => "Delete",
            OperationType.Head => "Head",
            OperationType.Trace => "Trace",
            _ => throw new ArgumentOutOfRangeException(nameof(ot), $"Not expected operationType value: {ot}"),
        };

        private static void GenerateApiMethod(StringBuilder sb, OperationType httpMethod, string path, OpenApiOperation operation, OpenApiDocument openApiDoc)
        {
            var methodName = SanitizeIdentifier(operation.OperationId ?? $"{httpMethod}{SanitizeIdentifier(path)}");
            var returnType = GetReturnType(operation);
            var parameters = GetParameters(operation);
            var hasBody = operation.RequestBody?.Content?.ContainsKey("application/json") ?? false;
            var bodyParameter = hasBody ? "body" : null;

            // Method signature

            if (string.IsNullOrEmpty(returnType))
                sb.AppendLine($"        public async Task {methodName}Async(");
            else
                sb.AppendLine($"        public async Task<{returnType}> {methodName}Async(");

            var parameterList = GetParameterList(parameters, bodyParameter, operation);

            if (! string.IsNullOrEmpty(parameterList))
                sb.AppendLine($"            {parameterList},");

            sb.AppendLine($"            CancellationToken cancellationToken = default)");
            sb.AppendLine("        {");

            // Build request URL (handle path parameters)
            var requestPath = path;
            foreach (var param in parameters.Where(p => p.In == ParameterLocation.Path))
            {
                requestPath = requestPath.Replace($"{{{param.Name}}}", $"{{{SanitizeParameterName(param.Name)}}}");
            }

            // HTTP request

            // Add query parameters
            var queryParams = parameters.Where(p => p.In == ParameterLocation.Query).ToList();
            sb.AppendLine("            var queryBuilder = new System.Text.StringBuilder();");

            if (queryParams.Any())
            {
                foreach (var param in queryParams)
                {
                    var paramName = SanitizeParameterName(param.Name);
                    sb.AppendLine($"            if ({paramName} != null)");
                    sb.AppendLine("            {");
                    sb.AppendLine($"                queryBuilder.Append(queryBuilder.Length == 0 ? \"?\" : \"&\");");
                    sb.AppendLine($"                queryBuilder.Append($\"{param.Name}={{Uri.EscapeDataString({paramName}.ToString())}}\");");
                    sb.AppendLine("            }");
                }
            }


            sb.AppendLine($"           var url = \"{requestPath}\";");
            sb.AppendLine("            var q = queryBuilder.ToString();");

            sb.AppendLine($"            var request = new HttpRequestMessage(HttpMethod.{MapOperationType(httpMethod)}, $\"{{url}}{{q}}\");");


            // Add body
            if (hasBody)
            {
                sb.AppendLine("            request.Content = new StringContent(");
                sb.AppendLine("                JsonSerializer.Serialize(body, _jsonOptions),");
                sb.AppendLine("                System.Text.Encoding.UTF8,");
                sb.AppendLine("                \"application/json\");");
            }

            // Add headers
            foreach (var param in parameters.Where(p => p.In == ParameterLocation.Header))
            {
                var paramName = SanitizeParameterName(param.Name);
                sb.AppendLine($"            request.Headers.Add(\"{param.Name}\", {paramName});");
            }

            // Send request
            sb.AppendLine("            var response = await _httpClient.SendAsync(request, cancellationToken);");
            sb.AppendLine("            response.EnsureSuccessStatusCode();");

            // Handle response
            if (!string.IsNullOrEmpty( returnType))
            {
                sb.AppendLine($"            return await JsonSerializer.DeserializeAsync<{returnType}>(");
                sb.AppendLine("                await response.Content.ReadAsStreamAsync(cancellationToken),");
                sb.AppendLine("                _jsonOptions,");
                sb.AppendLine("                cancellationToken);");
            }

            sb.AppendLine("        }");
            sb.AppendLine();
        }

        private static string GetCSharpTypeName(IOpenApiSchema schema)
        {
            if (schema is OpenApiSchemaReference schemaReference) {
                return schemaReference.Reference.Id;
            }

            var twd = schema.Type & ~JsonSchemaType.Null;

            var t = twd switch
            {
                 JsonSchemaType.String when schema.Format == "date-time" => "DateTimeOffset",
                 JsonSchemaType.String when schema.Format == "date" => "DateOnly",
                 JsonSchemaType.String when schema.Format == "time" => "TimeOnly",
                 JsonSchemaType.String when schema.Format == "byte" => "byte[]",
                 JsonSchemaType.String when schema.Format == "binary" => "Stream",
                 JsonSchemaType.String => "string",
                 JsonSchemaType.Number when schema.Format == "float" => "float",
                 JsonSchemaType.Number when schema.Format == "double" => "double",
                 JsonSchemaType.Number => "decimal",
                 JsonSchemaType.Integer when schema.Format == "int32" => "int",
                 JsonSchemaType.Integer when schema.Format == "int64" => "long",
                 JsonSchemaType.Integer => "int",
                 JsonSchemaType.Boolean => "bool",
                 JsonSchemaType.Array => $"IReadOnlyList<{GetCSharpTypeName(schema.Items)}>",
                 JsonSchemaType.Object => "object",
                _ => "object"
            };

            return schema.Type.Value.HasFlag(JsonSchemaType.Null)
                ? $"{t}?"
                : t;
        }

        private static string GetReturnType(OpenApiOperation operation)
        {
            if (operation.Responses is not null)
            { 
                if (operation.Responses.TryGetValue("200", out var response) &&
                    response.Content.TryGetValue("application/json", out var mediaType))
                {
                    if (mediaType.Schema is not null)
                        return $"{GetCSharpTypeName(mediaType.Schema)}";
                }
            }
            return string.Empty;
        }

        private static List<IOpenApiParameter> GetParameters(OpenApiOperation operation)
        {
            var parameters = new List<IOpenApiParameter>();

            if (operation.Parameters != null)
            {
                parameters.AddRange(operation.Parameters);
            }

            return parameters;
        }

        private static string GetParameterList(List<IOpenApiParameter> parameters, string? bodyParameter, OpenApiOperation operation)
        {
            var paramList = new List<string>();

            foreach (var param in parameters)
            {
                var paramName = SanitizeParameterName(param.Name);
                var paramType = GetCSharpTypeName(param.Schema);
                var defaultValue = param.Required ? "" : " = null";

                if (!paramType.EndsWith("?"))
                {
                    paramType = param.Required ? paramType: $"{paramType}?";
                }
          
                paramList.Add($"{paramType} {paramName}{defaultValue}");
            }

            if (bodyParameter != null)
            {
                var requestSchema = operation.RequestBody.Content["application/json"].Schema;
                var bodyType = GetCSharpTypeName(requestSchema);
                paramList.Add($"{bodyType} {bodyParameter}");
            }

            return paramList.Any()
                ? string.Join(",\n            ", paramList)
                : string.Empty;
        }

        private static string SanitizeIdentifier(string identifier)
        {
            if (string.IsNullOrEmpty(identifier))
                return "_";

            // Replace invalid characters
            identifier = Regex.Replace(identifier, @"[^a-zA-Z0-9_]", "_");

            // Ensure it starts with a letter or underscore
            if (!char.IsLetter(identifier[0]) && identifier[0] != '_')
            {
                identifier = "_" + identifier;
            }

            // Handle reserved keywords
            if (IsReservedKeyword(identifier))
            {
                identifier = "@" + identifier;
            }

            return identifier;
        }

        private static string SanitizeParameterName(string name)
        {
            var sanitized = SanitizeIdentifier(name).ToLower();
            return IsReservedKeyword(sanitized) ? "@" + sanitized : sanitized;
        }

        private static bool IsReservedKeyword(string identifier)
        {
            var keywords = new HashSet<string> {
            "abstract", "as", "base", "bool", "break", "byte", "case", "catch",
            "char", "checked", "class", "const", "continue", "decimal", "default",
            "delegate", "do", "double", "else", "enum", "event", "explicit",
            "extern", "false", "finally", "fixed", "float", "for", "foreach",
            "goto", "if", "implicit", "in", "int", "interface", "internal",
            "is", "lock", "long", "namespace", "new", "null", "object",
            "operator", "out", "override", "params", "private", "protected",
            "public", "readonly", "ref", "return", "sbyte", "sealed", "short",
            "sizeof", "stackalloc", "static", "string", "struct", "switch",
            "this", "throw", "true", "try", "typeof", "uint", "ulong",
            "unchecked", "unsafe", "ushort", "using", "virtual", "void",
            "volatile", "while"
        };

            return keywords.Contains(identifier);
        }

        private static string GetDefaultValue(IOpenApiSchema schema)
        {
            if (schema.Default == null)
                return "null";

            return schema.Type switch
            {
                JsonSchemaType.String => $"\"{schema.Default}\"",
                JsonSchemaType.Boolean => (bool)schema.Default ? "true" : "false",
                JsonSchemaType.Integer => schema.Default.ToString(),
                JsonSchemaType.Number => schema.Default.ToString() + (schema.Format == "float" ? "f" : "m"),
                _ => "null"
            };
        }
    }



  
}